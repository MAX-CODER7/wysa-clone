rom fastapi import FastAPI, Request
from pydantic import BaseModel
import sqlite3
import openai

app = FastAPI()

# Configure OpenAI API
openai.api_key = "YOUR_OPENAI_API_KEY"

# --- Database setup ---
conn = sqlite3.connect("wysa.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    mood INTEGER,
    badge TEXT
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS chats (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    message TEXT,
    response TEXT
)
""")
conn.commit()

# --- Request Models ---
class ChatRequest(BaseModel):
    user_id: int
    message: str

@app.post("/chat")
def chat_endpoint(req: ChatRequest):
    # Crisis detection
    crisis_keywords = ["suicide", "kill myself", "end it", "can't live"]
    if any(word in req.message.lower() for word in crisis_keywords):
        return {"response": "⚠️ I sense you’re in crisis. Please reach out immediately:\n988 (US Suicide Helpline)\nor your local helpline."}

    # AI response from OpenAI
    completion = openai.ChatCompletion.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": req.message}]
    )
    bot_reply = completion.choices[0].message["content"]

    # Save to DB
    cursor.execute("INSERT INTO chats (user_id, message, response) VALUES (?, ?, ?)",
                   (req.user_id, req.message, bot_reply))
    conn.commit()

    return {"response": bot_reply}

@app.get("/badges/{user_id}")
def get_badges(user_id: int):
    cursor.execute("SELECT badge FROM users WHERE id=?", (user_id,))
    badge = cursor.fetchone()
    return {"badges": badge if badge else []}

from dotenv import load_dotenv
import os, openai

load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")

print("Loaded Key:", openai.api_key[:10], "...")
